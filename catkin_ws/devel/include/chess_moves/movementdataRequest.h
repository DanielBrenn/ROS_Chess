// Generated by gencpp from file chess_moves/movementdataRequest.msg
// DO NOT EDIT!


#ifndef CHESS_MOVES_MESSAGE_MOVEMENTDATAREQUEST_H
#define CHESS_MOVES_MESSAGE_MOVEMENTDATAREQUEST_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace chess_moves
{
template <class ContainerAllocator>
struct movementdataRequest_
{
  typedef movementdataRequest_<ContainerAllocator> Type;

  movementdataRequest_()
    : capture(false)
    , next_Move()  {
    }
  movementdataRequest_(const ContainerAllocator& _alloc)
    : capture(false)
    , next_Move(_alloc)  {
  (void)_alloc;
    }



   typedef uint8_t _capture_type;
  _capture_type capture;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _next_Move_type;
  _next_Move_type next_Move;





  typedef boost::shared_ptr< ::chess_moves::movementdataRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::chess_moves::movementdataRequest_<ContainerAllocator> const> ConstPtr;

}; // struct movementdataRequest_

typedef ::chess_moves::movementdataRequest_<std::allocator<void> > movementdataRequest;

typedef boost::shared_ptr< ::chess_moves::movementdataRequest > movementdataRequestPtr;
typedef boost::shared_ptr< ::chess_moves::movementdataRequest const> movementdataRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::chess_moves::movementdataRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::chess_moves::movementdataRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::chess_moves::movementdataRequest_<ContainerAllocator1> & lhs, const ::chess_moves::movementdataRequest_<ContainerAllocator2> & rhs)
{
  return lhs.capture == rhs.capture &&
    lhs.next_Move == rhs.next_Move;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::chess_moves::movementdataRequest_<ContainerAllocator1> & lhs, const ::chess_moves::movementdataRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace chess_moves

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::chess_moves::movementdataRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::chess_moves::movementdataRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::chess_moves::movementdataRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::chess_moves::movementdataRequest_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::chess_moves::movementdataRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::chess_moves::movementdataRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::chess_moves::movementdataRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "4cd85a70bbf6cd984a90000cc83dfa07";
  }

  static const char* value(const ::chess_moves::movementdataRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x4cd85a70bbf6cd98ULL;
  static const uint64_t static_value2 = 0x4a90000cc83dfa07ULL;
};

template<class ContainerAllocator>
struct DataType< ::chess_moves::movementdataRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "chess_moves/movementdataRequest";
  }

  static const char* value(const ::chess_moves::movementdataRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::chess_moves::movementdataRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "bool capture\n"
"string next_Move\n"
;
  }

  static const char* value(const ::chess_moves::movementdataRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::chess_moves::movementdataRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.capture);
      stream.next(m.next_Move);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct movementdataRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::chess_moves::movementdataRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::chess_moves::movementdataRequest_<ContainerAllocator>& v)
  {
    s << indent << "capture: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.capture);
    s << indent << "next_Move: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.next_Move);
  }
};

} // namespace message_operations
} // namespace ros

#endif // CHESS_MOVES_MESSAGE_MOVEMENTDATAREQUEST_H
